plugins {
    id 'fabric-loom' version '1.9.2'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "originsfurs" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        name = "AzureDoom Mods"
        url = "https://maven.azuredoom.com/mods"
    }

    maven { url "https://jitpack.io" }

    maven {
        name = "Ladysnake"
        url = "https://maven.ladysnake.org/releases/"
    }

    maven {
        name = "Architectury"
        url = "https://maven.architectury.dev/"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // modrinth format: maven.modrinth:modname:modversionname-loader,mcversion
    // example for modrinth mods: maven.modrinth:sodium:mc1.19.2-0.4.4
    //modImplementation "maven.modrinth:azurelib:3.0.11-fabric,1.21.1"
    //modCompileOnly "maven.modrinth:origins:RzhrT8Th" // 1.13.0-alpha.12+mc1.21.1
    //modImplementation "io.github.apace100:calio:1.14.0-alpha.9+mc.1.21.x"
    //modImplementation "com.github.apace100:origins-fabric:1.13.0-alpha.12+mc1.21.1"
    modImplementation files("libs/Origins-1.13.0-alpha.12+mc.1.21.1.jar")
    modImplementation files("libs/Calio-1.14.0-alpha.9+mc.1.21.x.jar")
    modImplementation files("libs/Apoli-2.12.0-alpha.15+mc.1.21.1.jar")

    modCompileOnly "org.ladysnake.cardinal-components-api:cardinal-components-entity:6.2.2"

    modCompileOnly 'io.github.ladysnake:PlayerAbilityLib:1.11.0'

    modCompileOnly 'me.shedaniel.cloth:config-2:5.0.0'

    // https://mvnrepository.com/artifact/me.shedaniel.cloth/cloth-config-fabric
    modCompileOnly 'me.shedaniel.cloth:cloth-config-fabric:15.0.140'

    // From azurelib wiki
    modApi "mod.azure.azurelib:azurelib-fabric-1.21.1:3.0.11"

    modCompileOnly files("libs/HMI-4.3-1.21.1.jar")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
    options.compilerArgs += ["-Xlint:-removal"] // build even with deprecated stuff
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
